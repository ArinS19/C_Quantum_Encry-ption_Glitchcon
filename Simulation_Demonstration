<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Kyber Hybrid Encryption Simulator</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Fira+Code&family=Inter:wght@400;600&display=swap');

:root {
--bg-color: #0e101c;
--card-color: #1a1c2c;
--text-color: #ffffff;
--accent: #00c896;
--key-box-bg: #2e2f40;
}

body {
font-family: 'Inter', sans-serif;
padding: 40px;
background-color: var(--bg-color);
color: var(--text-color);
}

h1 {
font-size: 36px;
color: var(--accent);
}

.section {
margin-top: 30px;
background: var(--card-color);
padding: 50px;
border-radius: 12px;
box-shadow: 0 0 12px rgba(0, 200, 150, 0.15);
}

.key-box, .cipher-box {
background-color: var(--key-box-bg);
font-family: 'Fira Code', monospace;
padding: 12px;
border-radius: 6px;
overflow-wrap: break-word;
margin-top: 5px;
font-size: 14px;
}

input {
padding: 10px;
width: 60%;
margin-top: 10px;
border-radius: 6px;
border: none;
font-size: 16px;
}

button {
padding: 10px 18px;
margin-top: 15px;
font-weight: bold;
cursor: pointer;
background-color: var(--accent);
border: none;
color: black;
border-radius: 5px;
transition: background-color 0.3s;
}

button:hover {
background-color: #00e8ac;
}

.disclaimer {
font-size: 12px;
margin-top: 25px;
color: #aaa;
}
</style>
</head>
<body>

<h1 style="font-size: 4em;">‚ú® Kyber Hybrid Encryption Simulator ‚ú®</h1>

<div class="section">
<label for="plaintext"><strong>Enter Plaintext Message:</strong></label><br>
<input type="text" id="plaintext" placeholder="Hello world">
<br>
<button onclick="generateKeys()">Generate Keys</button>
</div>

<div class="section" id="keySection" style="display: none;">
<p><strong>Public Key:</strong></p>
<div class="key-box" id="publicKey"></div>
<p><strong>Private Key:</strong></p>
<div class="key-box" id="privateKey"></div>
<button onclick="encrypt()">Encrypt Message</button>
</div>

<div class="section" id="encryptionSection" style="display: none;">
<p><strong>Simulated AES Key (Encrypted with Kyber):</strong></p>
<div class="cipher-box" id="aesKeyCiphertext"></div>
<p><strong>Ciphertext (Encrypted Message using AES):</strong></p>
<div class="cipher-box" id="ciphertext"></div>
<button onclick="decrypt()">Decrypt Message</button>
<button onclick="detectFraud()">Detect Fraud (Simulated)</button> <!-- Fraud Detection Button -->
</div>

<div class="section" id="decryptionSection" style="display: none;">
<p><strong>Decrypted Plaintext:</strong></p>
<div class="cipher-box" id="decryptedText"></div>
</div>

<div class="section" id="fraudDetectionSection" style="display: none;"> <!-- ADDED FRAUD DETECTION SECTION -->
<p><strong>Fraud Detection Analysis:</strong></p>
<div class="cipher-box" id="fraudDetectionResult"></div>
</div>

<div class="disclaimer">
üîê This is a visual simulation for educational purposes only. No actual Kyber or AES encryption is used. It demonstrates the <i>idea</i> of hybrid encryption and <i>simulated</i> AI-driven fraud detection.
</div>

<script>
let originalText = "";
let fakePublicKey = "";
let fakePrivateKey = "";
let encryptedAesKey = "";
let encrypted = "";

function generateRandomKey(length = 256) {
const chars = 'abcdef0123456789';
let result = '';
for (let i = 0; i < length; i++) {
result += chars.charAt(Math.floor(Math.random() * chars.length));
}
return result.match(/.{1,64}/g).join('\n');
}

function generateKeys() {
originalText = document.getElementById('plaintext').value;
if (!originalText) {
alert("Please enter a message first!");
return;
}

fakePublicKey = generateRandomKey(256);
fakePrivateKey = generateRandomKey(256);

document.getElementById('publicKey').innerText = fakePublicKey;
document.getElementById('privateKey').innerText = fakePrivateKey;

document.getElementById('keySection').style.display = 'block';
document.getElementById('encryptionSection').style.display = 'none';
document.getElementById('decryptionSection').style.display = 'none';
document.getElementById('fraudDetectionSection').style.display = 'none';
}

// Simulate hybrid encryption: Kyber to "encrypt" the AES key, then AES to encrypt the message
function encrypt() {
// 1. Simulate generating and "encrypting" an AES key using Kyber (KEM)
encryptedAesKey = generateRandomKey(32); // Simulate a 32-byte AES key
document.getElementById('aesKeyCiphertext').innerText = encryptedAesKey;

// 2. Simulate AES encryption using the "encrypted" AES key
encrypted = "";
const chars = 'abcdef0123456789';
for (let i = 0; i < originalText.length * 8; i++) {
encrypted += chars.charAt(Math.floor(Math.random() * chars.length));
}
encrypted = encrypted.match(/.{1,64}/g).join('\n');

document.getElementById('ciphertext').innerText = encrypted;
document.getElementById('encryptionSection').style.display = 'block';
document.getElementById('decryptionSection').style.display = 'none';
document.getElementById('fraudDetectionSection').style.display = 'none'; // Reset fraud section
}

function decrypt() {
document.getElementById('decryptedText').innerText = originalText;
document.getElementById('decryptionSection').style.display = 'block';
document.getElementById('fraudDetectionSection').style.display = 'none';// Reset fraud section
}

function detectFraud() {
// Simulate AI-driven fraud detection (it's random!)
const isFraudulent = Math.random() < 0.5; // 50% chance of fraud
const result = isFraudulent ? "Potential Fraud Detected!" : "No Fraud Detected.";

document.getElementById('fraudDetectionResult').innerText = result;
document.getElementById('fraudDetectionSection').style.display = 'block'; // Show fraud section
}
</script>
</body>
</html>
